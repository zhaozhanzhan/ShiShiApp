import { Component } from "@angular/core";
import {
  AlertController,
  NavController,
  NavParams,
  ActionSheetController,
  Platform,
  MenuController,
  IonicPage,
  ViewController,
  App
} from "ionic-angular";
import _ from "underscore"; // 工具类
import { GlobalService } from "../../common/service/GlobalService";
import { HttpReqService } from "../../common/service/HttpUtils.Service";
import { Local } from "../../common/service/Storage";
// import { FormBuilder } from "@angular/forms";
// import { Storage } from "@ionic/storage";
// import { JsUtilsService } from "../../common/service/JsUtils.Service";
// import { FormValidService } from "../../common/service/FormValid.Service";
// import { GlobalMethod } from "../../common/service/GlobalMethod";
// import { ParamService } from "../../common/service/Param.Service";
declare const cordova: any;

@IonicPage()
@Component({
  selector: "page-print-tag",
  templateUrl: "print-tag.html"
})
export class PrintTagPage {
  public paramId: string = null; // 传递过来的参数ID
  public formInfo: any = null; // 数据对象
  public isShowBox: boolean = false; // 是否显示弹出框
  public isScaning: boolean = false; // 是否正在扫描
  public isBleOpen: boolean = false; // 蓝牙是否开启状态
  public isConnected: boolean = false; // 打印机连接状态
  public bleDevMac: string = null; // 蓝牙设置Mac地址
  public interTimer: any = null; // 定时器
  public bleObjArr: Array<any> = []; // 蓝牙对象列表数组

  constructor(
    // private jsUtil: JsUtilsService, // 自定义JS工具类
    // private ionicStorage: Storage, // IonicStorage
    // private fb: FormBuilder, // 响应式表单
    public app: App,
    public httpReq: HttpReqService, // Http请求服务
    public navCtrl: NavController, // 导航控制器
    public viewCtrl: ViewController, // 视图控制器
    public navParams: NavParams, // 导航参数传递控制
    public menuCtrl: MenuController, // 侧边栏控制
    public gloService: GlobalService, // 全局自定义服务
    public actionSheetCtrl: ActionSheetController, // 操作表控制器
    public platform: Platform, // 获取平台信息
    public alertCtrl: AlertController // Alert消息弹出框
  ) {
    this.paramId = this.navParams.get("id"); // 获取详情数据时需要的ID
    console.error("传递过来的参数ID", this.paramId);
  }

  ionViewDidLoad() {
    console.log("ionViewDidLoad PrintTagPage");
  }

  ionViewWillEnter() {
    if (_.isString(this.paramId) && this.paramId.length > 0) {
      console.error("this.paramId", this.paramId);
      const sendObj = {
        id: this.paramId
      };
      this.httpReq.post(
        "foodRetention/findById",
        null,
        sendObj,
        (data: any) => {
          if (data["status"] == 200) {
            if (data["code"] == 0) {
              if (_.isObject(data["data"]) && !_.isEmpty(data["data"])) {
                this.formInfo = data["data"];
                console.log("scan");
                this.clickConnect(); // 连接蓝牙操作
                // this.bleDevMac = null; // 清除存储的蓝牙设备地址
                // Local.set("bleDevMac", "");
                // if (
                //   _.isString(data["data"]["reservedImg"]) &&
                //   data["data"]["reservedImg"].length > 0
                // ) {
                //   this.imgArr = data["data"]["reservedImg"].split(",");
                // }
              }
            } else {
              this.gloService.showMsg(data["message"], null, 2000);
            }
          } else {
            this.gloService.showMsg("请求服务器出错", null, 2000);
          }
        }
      );
    } else {
      this.gloService.showMsg("未获取到ID", null, 2000);
      if (this.navCtrl.canGoBack()) {
        this.navCtrl.pop();
      }
    }
  }

  ionViewDidEnter() {}

  ionViewWillUnload() {
    this.closeTimer(); // 关闭定时器
  }

  /**
   * 检查蓝牙是否开启
   * @returns
   * @memberof PrintTagPage
   */
  public checkBleIsOpen() {
    return new Promise((resolve, reject) => {
      this.ble.isEnabled().then(
        (enaSuc: any) => {
          // OK
          console.error("蓝牙已启用", enaSuc);
          if (enaSuc == "OK") {
            this.isBleOpen = true;

            const platform = this.gloService.getPlatform();
            console.error("=======开始扫描==========");
            if (platform == "android") {
              cordova["plugins"]["qiruiPrint"].doDiscovery(
                discoverySuc => {
                  console.log("扫描到：" + JSON.stringify(discoverySuc));
                  console.error("自定义Toast执行成功");
                },
                discoveryErr => {
                  console.error("自定义Toast执行失败");
                }
              );
            }

            resolve(true);
          } else {
            this.isBleOpen = false;
            reject(false);
          }
        },
        (enaErr: any) => {
          // Bluetooth is disabled
          console.error("蓝牙未启用", enaErr);
          if (enaErr == "Bluetooth is disabled.") {
            console.error("蓝牙未启用AAAA");
            this.isBleOpen = false;
            reject(false);
          } else {
            console.error("蓝牙未启用BBBBB");
            this.isBleOpen = false;
            reject(false);
          }
        }
      );
    });
  }

  /**
   * 开启蓝牙
   * @memberof PrintTagPage
   */
  public openBle() {
    return new Promise((resolve, reject) => {
      const manual = this.alertCtrl.create({
        title: "提示",
        message: "开启蓝牙失败，请前往手动开启！",
        buttons: [
          {
            text: "不开启",
            handler: () => {
              const resObj: any = {};
              resObj.state = false;
              resObj.msg = "蓝牙开启失败！";
              reject(resObj);
            }
          },
          {
            text: "前往开启",
            handler: () => {
              this.ble.showBluetoothSettings().then(
                openSuc => {
                  console.error("打开蓝牙设置成功", openSuc);
                  // const resObj: any = {};
                  // resObj.state = true;
                  // resObj.msg = "蓝牙开启成功！";
                  // resolve(resObj);
                },
                openErr => {
                  console.error("打开蓝牙设置失败", openErr);
                  const resObj: any = {};
                  resObj.state = false;
                  resObj.msg = "蓝牙开启失败！";
                  reject(resObj);
                }
              );
              // this.qrScanner.openSettings(); // 打开相机设置
              // this.openNativeSettings.open("application_details");
              // this.openNativeSettings.open("application_development");
              // this.openNativeSettings.open("application");
              // this.openNativeSettings.open("notification_id");
            }
          }
        ]
      });
      const confirm = this.alertCtrl.create({
        title: "提示",
        message: "检测到蓝牙未开启，是否开启？",
        buttons: [
          {
            text: "否",
            handler: () => {
              const resObj: any = {};
              resObj.state = false;
              resObj.msg = "蓝牙未开启！";
              reject(resObj);
            }
          },
          {
            text: "是",
            handler: () => {
              this.ble.enable().then(
                (enaSuc: any) => {
                  console.error("开启蓝牙成功", enaSuc);
                  const resObj: any = {};
                  resObj.state = true;
                  resObj.msg = "蓝牙开启成功！";
                  resolve(resObj);
                },
                (enaErr: any) => {
                  console.error("开启蓝牙失败", enaErr);
                  if (enaErr == "User did not enable Bluetooth") {
                    const resObj: any = {};
                    resObj.state = false;
                    resObj.msg = "蓝牙开启失败！";
                    reject(resObj);
                  } else {
                    manual.present();
                  }
                }
              );
            }
          }
        ]
      });
      confirm.present();
      // let rootNav = this.app.getRootNavs()[0]; // 获取根导航
      // let ionicApp = rootNav._app._appRoot;
      // let activePortal = ionicApp._overlayPortal.getActive();
      // if (!activePortal) {
      //   confirm.present();
      // }
    });
  }

  /**
   * 切换是否显示弹出框
   * @memberof PrintTagPage
   */
  public toggleShowBox() {
    this.isShowBox = !this.isShowBox;
  }

  /**
   * 扫描设备
   * @memberof PrintTagPage
   */
  public scanDevice(ev?: Event) {
    if (ev) {
      ev.stopPropagation();
    }
    if (!this.isBleOpen) {
      // 蓝牙是否开启状态
      this.gloService.showMsg("蓝牙未开启！");
      return;
    }
    // if (!this.isScaning) {
    //   // 蓝牙是否开启状态
    //   this.gloService.showMsg("正在扫描蓝牙设备，请稍候！");
    //   return;
    // }
    this.isScaning = true; // 正在扫描
    this.isShowBox = true; // 显示弹出框
    this.bleObjArr = []; // 清空扫描到的设备
    setTimeout(() => {
      this.isScaning = false; // 扫描完成
    }, 5000);
    // this.ble.scan([], 5).subscribe(
    //   device => {
    //     console.error("扫描成功的数据", device);
    //     this.bleObjArr.push(device);
    //     console.log(JSON.stringify(device));
    //   },
    //   error => {
    //     console.error("扫描失败的数据", error);
    //     console.log(error);
    //   }
    // );
  }

  /**
   * 连接蓝牙操作
   * @memberof PrintTagPage
   */
  public clickConnect() {
    // 检查蓝牙是否开启
    this.checkBleIsOpen().then(
      checkSuc => {
        console.error("检测蓝牙状态成功！", checkSuc);

        this.bleDevMac = Local.get("bleDevMac"); // 获取存储的蓝牙设备地址
        if (_.isString(this.bleDevMac) && this.bleDevMac.length > 0) {
          this.autoConnect();
        } else {
          this.scanDevice(); // 扫描设备
        }
      },
      checkErr => {
        console.error("检测蓝牙状态失败！", checkErr);

        // 手动开启蓝牙
        this.openBle().then(
          openBleSuc => {
            console.error("手动开启蓝牙成功", openBleSuc);
            this.isBleOpen = true;
            this.bleDevMac = Local.get("bleDevMac"); // 获取存储的蓝牙设备地址
            if (_.isString(this.bleDevMac) && this.bleDevMac.length > 0) {
              this.autoConnect();
            } else {
              this.scanDevice(); // 扫描设备
            }
          },
          openBleErr => {
            console.error("手动开启蓝牙失败", openBleErr);
            this.isBleOpen = false;
            this.gloService.showMsg(openBleErr.msg);
          }
        );
      }
    );
  }

  /**
   * 定时检查蓝牙连接状态
   * @memberof PrintTagPage
   */
  public checkBleConnect() {
    this.interTimer = setInterval(() => {
      if (_.isString(this.bleDevMac) && this.bleDevMac.length > 0) {
        this.ble.isConnected(this.bleDevMac).then(
          conSuc => {
            console.error("连接成功", conSuc);
            this.isConnected = true;
          },
          conErr => {
            console.error("连接失败", conErr);
            this.isConnected = false;
            this.bleDevMac = null; // 清除存储的蓝牙设备地址
            Local.set("bleDevMac", "");
          }
        );
      } else {
        window.clearInterval(this.interTimer);
      }
    }, 1000);
  }

  /**
   * 关闭定时器
   * @memberof PrintTagPage
   */
  public closeTimer() {
    window.clearInterval(this.interTimer);
  }

  /**
   * 选择蓝牙设备连接
   * @param {string} bleMac
   * @memberof PrintTagPage
   */
  public selBelDev(bleMac: string) {
    return new Promise((resolve, reject) => {
      const loading = this.gloService.showLoading("正在连接打印机，请稍候...");

      const cusTimer: any = setTimeout(() => {
        let rootNav = this.app.getRootNavs()[0]; // 获取根导航
        let ionicApp = rootNav._app._appRoot;
        let activePortal = ionicApp._overlayPortal.getActive();
        if (activePortal) {
          loading.dismiss();
          this.isConnected = false; // 蓝牙未连接
          this.gloService.showMsg("连接蓝牙设备失败，请重新选择设备！");
        }
      }, 10000);

      if (_.isString(bleMac) && bleMac.length > 0) {
        this.ble.connect(bleMac).subscribe(
          conSuc => {
            console.error("连接蓝牙设备成功", conSuc);
            // cordova["plugins"]["qiruiPrint"].connectPrintDev(
            //   bleMac,
            //   (sucMsg: any) => {
            //     console.error("连接打印机执行成功");
            //     console.error("连接蓝牙设备成功");
            //     console.error("sucMsg", sucMsg);
            //     this.bleDevMac = conSuc.id; // 蓝牙Mac地址
            //     Local.set("bleDevMac", conSuc.id); // 存储蓝牙设备地址
            //     // this.bleDevMac = bleMac; // 蓝牙Mac地址
            //     // Local.set("bleDevMac", bleMac); // 存储蓝牙设备地址
            //     this.checkBleConnect(); // 定时检查蓝牙连接状态
            //     loading.dismiss();
            //     window.clearTimeout(cusTimer);
            //     this.isConnected = true; // 蓝牙已连接
            //     resolve();
            //   },
            //   (errMsg: any) => {
            //     console.error("连接打印机执行失败");
            //     console.error("连接蓝牙设备失败");
            //     console.error("errMsg", errMsg);
            //     loading.dismiss();
            //     window.clearTimeout(cusTimer);
            //     this.isConnected = false; // 蓝牙未连接
            //     this.gloService.showMsg("打印机配对失败，请重新选择设备！");
            //     reject();
            //   }
            // );
            let printMac: string = null;
            if (conSuc.id == "DC:0D:30:43:0C:A0") {
              printMac = "DC:1D:30:43:0C:A0";
            } else {
              printMac = conSuc.id;
            }
            if (conSuc.id == "DC:0D:30:41:1F:2E") {
              printMac = "DC:1D:30:41:1F:2E";
            } else {
              printMac = conSuc.id;
            }
            cordova["plugins"]["qiruiPrint"].conPrintDev(
              printMac,
              (checkStateSuc: any) => {
                console.error("打印机配对信息AAAA", checkStateSuc);
                this.bleDevMac = conSuc.id; // 蓝牙Mac地址
                Local.set("bleDevMac", conSuc.id); // 存储蓝牙设备地址
                this.checkBleConnect(); // 定时检查蓝牙连接状态
                loading.dismiss();
                window.clearTimeout(cusTimer);
                this.isConnected = true; // 蓝牙已连接
                resolve();
              },
              (checkStateErr: any) => {
                console.error("打印机配对信息BBBB", checkStateErr);
                this.bleDevMac = ""; // 蓝牙Mac地址
                Local.set("bleDevMac", ""); // 存储蓝牙设备地址
                loading.dismiss();
                window.clearTimeout(cusTimer);
                this.isConnected = true; // 蓝牙已连接
                this.gloService.showMsg("打印机配对失败！");
                reject();
              }
            );
          },
          conErr => {
            console.error("连接蓝牙设备失败", conErr);
            loading.dismiss();
            window.clearTimeout(cusTimer);
            this.isConnected = false; // 蓝牙未连接
            this.gloService.showMsg("连接蓝牙设备失败，请重新选择设备！");
            reject();
          }
        );
        // const platform = this.gloService.getPlatform();
        // console.error("测试打印");
        // if (platform == "android") {
        //   console.error("测试打印AAA", cordova);
        //   console.error("测试打印AAA", cordova["plugins"]);
        //   cordova["plugins"]["qiruiPrint"].connectPrintDev(
        //     bleMac,
        //     () => {
        //       console.error("连接打印机执行成功");
        //       console.error("连接蓝牙设备成功");
        //       this.bleDevMac = bleMac; // 蓝牙Mac地址
        //       Local.set("bleDevMac", bleMac); // 存储蓝牙设备地址
        //       this.checkBleConnect(); // 定时检查蓝牙连接状态
        //       loading.dismiss();
        //       window.clearTimeout(cusTimer);
        //       this.isConnected = true; // 蓝牙已连接
        //       resolve();
        //     },
        //     () => {
        //       console.error("连接打印机执行失败");
        //       console.error("连接蓝牙设备失败");
        //       loading.dismiss();
        //       window.clearTimeout(cusTimer);
        //       this.isConnected = false; // 蓝牙未连接
        //       this.gloService.showMsg("连接蓝牙设备失败，请重新选择设备！");
        //       reject();
        //     }
        //   );
        // }
      } else {
        loading.dismiss();
        window.clearTimeout(cusTimer);
        this.isConnected = false; // 蓝牙未连接
        this.gloService.showMsg("未获取到蓝牙设备Mac地址");
        reject();
      }
    });
  }

  /**
   * 自动连接蓝牙设备
   * @memberof PrintTagPage
   */
  public autoConnect() {
    if (_.isString(this.bleDevMac) && this.bleDevMac.length > 0) {
      const loading = this.gloService.showLoading("正在连接，请稍候...");
      this.ble.autoConnect(
        this.bleDevMac,
        (conSuc: any) => {
          console.error("连接蓝牙设备成功", conSuc);
          setTimeout(() => {
            let printMac: string = null;
            if (conSuc.id == "DC:0D:30:43:0C:A0") {
              printMac = "DC:1D:30:43:0C:A0";
            } else {
              printMac = conSuc.id;
            }
            if (conSuc.id == "DC:0D:30:41:1F:2E") {
              printMac = "DC:1D:30:41:1F:2E";
            } else {
              printMac = conSuc.id;
            }
            cordova["plugins"]["qiruiPrint"].conPrintDev(
              printMac,
              (checkStateSuc: any) => {
                console.error("打印机配对信息AAAA", checkStateSuc);
                this.bleDevMac = conSuc.id; // 蓝牙Mac地址
                Local.set("bleDevMac", conSuc.id); // 存储蓝牙设备地址
                this.checkBleConnect(); // 定时检查蓝牙连接状态
                loading.dismiss();
                this.isConnected = true; // 蓝牙已连接
              },
              (checkStateErr: any) => {
                console.error("打印机配对信息BBBB", checkStateErr);
                this.bleDevMac = ""; // 蓝牙Mac地址
                Local.set("bleDevMac", ""); // 存储蓝牙设备地址
                loading.dismiss();
                this.isConnected = true; // 蓝牙已连接
                this.gloService.showMsg("打印机配对失败！");
              }
            );
          }, 300);

          // this.checkBleConnect(); // 定时检查蓝牙连接状态
          // loading.dismiss();
          // this.isConnected = true; // 蓝牙已连接
        },
        (conErr: any) => {
          console.error("连接蓝牙设备失败", conErr);
          loading.dismiss();
          this.isConnected = false; // 蓝牙未连接
          this.gloService.showMsg("连接蓝牙设备失败，请重新选择设备！");

          this.bleDevMac = null; // 清除存储的蓝牙设备地址
          Local.set("bleDevMac", "");
        }
      );
    } else {
      this.isConnected = false; // 蓝牙未连接
      this.gloService.showMsg("未获取到蓝牙设备Mac地址,请重新扫描");
    }
  }

  /**
   * 断开蓝牙设备连接
   * @memberof PrintTagPage
   */
  public closeConnect() {
    if (_.isString(this.bleDevMac) && this.bleDevMac.length > 0) {
      this.ble.disconnect(this.bleDevMac).then(
        disconSuc => {
          console.error("断开连接成功", disconSuc);
          cordova["plugins"]["qiruiPrint"].closePrintDev(
            (closeSuc: any) => {
              console.error(closeSuc);
            },
            (closeErr: any) => {
              console.error(closeErr);
            }
          ); // 断开打印机
          this.isConnected = false;
          this.closeTimer(); // 关闭定时器
          this.bleDevMac = null; // 清除存储的蓝牙设备地址
          Local.set("bleDevMac", "");
        },
        disconErr => {
          console.error("断开连接失败", disconErr);
          this.isConnected = true;
        }
      );
    } else {
      this.gloService.showMsg("获取要断开连接的设备Mac地址失败");
    }
  }

  /**
   * 测试自定义Toast
   * @memberof RetenSampDetailPage
   */
  public testToast() {
    const platform = this.gloService.getPlatform();
    console.error("测试打印");
    if (platform == "android") {
      console.error("测试打印AAA", cordova);
      console.error("测试打印AAA", cordova["plugins"]);
      cordova["plugins"]["qiruiPrint"].showToast(
        "Helloworld",
        () => {
          console.error("自定义Toast执行成功");
        },
        () => {
          console.error("自定义Toast执行失败");
        }
      );
    }
  }

  /**
   * 打印标签
   * @memberof PrintTagPage
   */
  public clickPrint() {
    cordova["plugins"]["qiruiPrint"].printContent(
      JSON.stringify({ xxx: 123 }),
      (priSuc: any) => {
        console.error("自定义执行成功", priSuc);
      },
      (priErr: any) => {
        console.error("自定义执行失败", priErr);
      }
    );
  }
}
